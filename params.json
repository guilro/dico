{"name":"Dico","tagline":"A service container in javascript.","body":"# Dico\r\n\r\nDico is a simple dependency injection container in javascript.\r\n\r\n# Installation\r\n\r\n```bash\r\n$ npm install dico\r\n```\r\n\r\n## Usage\r\n\r\nRequire it your code :\r\n```js\r\nvar dico = require('dico');\r\ncontainer = dico('myApp');\r\n```\r\n\r\nThe container object has three methods, `get`, `set` and `load`, for managing parameters and services. In simple cases, you can `set` manually parameters and services, but if you use a dependency injector, you would probably want to load it from a JSON config file.\r\n\r\n### Parameters\r\n```js\r\ncontainer.set('param', 'paramValue');\r\ncontainer.get('param'); // return 'paramValue'\r\n```\r\n\r\n### Services\r\nTo define services, just pass a function as a parameter. The function will get the container as the first parameter and a callback as the second. A service can be any object useful to your app and/or to other services.\r\n\r\n```js\r\ncontainer.set('myService', function(c, cb) {\r\n  // get params from container\r\n  var param1 = c.get('param1');\r\n  // create service object with those params\r\n  // ...\r\n\r\n  return cb(null, service);\r\n});\r\n\r\ncontainer.get('@myService', function(err, service) {\r\n  service.doStuff();\r\n});\r\n```\r\n\r\nTo get the service, just put `@` before its name. If you do `container.get('myService')`, it will return the service creation function and not the service itself.\r\n\r\nWith the container being passed, you can access other services and parameters inside the service creation function. Dependencies are injected this way.\r\n\r\nNote that services are only instantiated when requested, so the order of definition does not matter.\r\n\r\n### Loading from JSON\r\n\r\nYou can use `container.load(config, basedir)` to define many services quickly.\r\n\r\n./services/config.json :\r\n```json\r\n  {\r\n  \"database\": {\r\n    \"module\": \"./services/database.js\",\r\n    \"errorLog\": \"@logger\",\r\n    \"host\": \"localhost\"\r\n  },\r\n  \"logger\": {\r\n    \"module\": \"./services/logger.js\",\r\n  },\r\n  \"environment\": \"dev\"\r\n}\r\n```\r\n\r\n./services/database.js\r\n```js\r\nmodule.exports = function(container, cb) {\r\n  container.get('@errorLog', function(err, logger) {\r\n    if (err) return cb(err);\r\n\r\n    var database = new Database();\r\n    database.setErrorLog(logger);\r\n    database.setEnv(container.get('environment'));\r\n\r\n    cb(null, database);\r\n  });\r\n};\r\n```\r\n\r\n./services/logger.js\r\n```js\r\nmodule.exports = function(container, cb) {\r\n  var logger = new Logger();\r\n  logget.setLevel(container.get('environment'));\r\n};\r\n```\r\n\r\n./app.js :\r\n```js\r\ncontainer.load(JSON.parse('./services/config.json'), __dirname);\r\n\r\ncontainer.get('@database', function(err, database) {\r\n  database.doStuff();\r\n})\r\n```\r\n\r\nThe second parameter of `load` is the base directory where we should require the modules indicated in the config.\r\n\r\nEach property of the config is set as a new service if it has itself a `module` property (like `logger` and `database`), and is set as a parameter otherwise (like `environment`). Services defined this way can get *local parameters*, like `errorLog` and `host` in the example, wich are not accessible from other services. (see below)\r\n\r\n### Namespacing\r\n\r\nContainers which are passed to service creation functions are slightly modified. Each time you try to access a parameter or a service from a container passed to a service creation function, the name of the service you are currently creating is first appended with a dot to the parameter you are requesting. Only if such a parameter is undefined, it will try to get it with the original name.\r\n\r\nIt allows you to override parameters locally if several services are using the same names for there parameters but you want to inject different parameters to those services. In the example above, `errorLog` and `host` are in fact set to `database.errorLog` and `database.host` in the container, so they do not interfer with the logger service parameters.\r\n\r\nAs we can access them from the database service creation function without writing excplicitely the namespace, it will more likely be completely transparent if you do not use this feature.\r\n","google":"UA-38236861-5","note":"Don't delete this file! It's used internally to help with page regeneration."}